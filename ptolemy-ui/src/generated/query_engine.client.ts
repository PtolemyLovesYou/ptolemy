// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "query_engine.proto" (package "query_engine", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { QueryEngine } from './query_engine';
import type { QueryStatusResponse } from './query_engine';
import type { QueryStatusRequest } from './query_engine';
import type { CancelQueryResponse } from './query_engine';
import type { CancelQueryRequest } from './query_engine';
import type { FetchBatchResponse } from './query_engine';
import type { FetchBatchRequest } from './query_engine';
import type { ServerStreamingCall } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { QueryResponse } from './query_engine';
import type { QueryRequest } from './query_engine';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service query_engine.QueryEngine
 */
export interface IQueryEngineClient {
  /**
   * Execute a query
   *
   * @generated from protobuf rpc: Query(query_engine.QueryRequest) returns (query_engine.QueryResponse);
   */
  query(
    input: QueryRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryRequest, QueryResponse>;
  /**
   * Stream results back to client
   *
   * @generated from protobuf rpc: FetchBatch(query_engine.FetchBatchRequest) returns (stream query_engine.FetchBatchResponse);
   */
  fetchBatch(
    input: FetchBatchRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<FetchBatchRequest, FetchBatchResponse>;
  /**
   * Cancel an in-progress query
   *
   * @generated from protobuf rpc: CancelQuery(query_engine.CancelQueryRequest) returns (query_engine.CancelQueryResponse);
   */
  cancelQuery(
    input: CancelQueryRequest,
    options?: RpcOptions,
  ): UnaryCall<CancelQueryRequest, CancelQueryResponse>;
  /**
   * Get query status
   *
   * @generated from protobuf rpc: GetQueryStatus(query_engine.QueryStatusRequest) returns (query_engine.QueryStatusResponse);
   */
  getQueryStatus(
    input: QueryStatusRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryStatusRequest, QueryStatusResponse>;
}
/**
 * @generated from protobuf service query_engine.QueryEngine
 */
export class QueryEngineClient implements IQueryEngineClient, ServiceInfo {
  typeName = QueryEngine.typeName;
  methods = QueryEngine.methods;
  options = QueryEngine.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Execute a query
   *
   * @generated from protobuf rpc: Query(query_engine.QueryRequest) returns (query_engine.QueryResponse);
   */
  query(
    input: QueryRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryRequest, QueryResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<QueryRequest, QueryResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Stream results back to client
   *
   * @generated from protobuf rpc: FetchBatch(query_engine.FetchBatchRequest) returns (stream query_engine.FetchBatchResponse);
   */
  fetchBatch(
    input: FetchBatchRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<FetchBatchRequest, FetchBatchResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<FetchBatchRequest, FetchBatchResponse>(
      'serverStreaming',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Cancel an in-progress query
   *
   * @generated from protobuf rpc: CancelQuery(query_engine.CancelQueryRequest) returns (query_engine.CancelQueryResponse);
   */
  cancelQuery(
    input: CancelQueryRequest,
    options?: RpcOptions,
  ): UnaryCall<CancelQueryRequest, CancelQueryResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CancelQueryRequest, CancelQueryResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Get query status
   *
   * @generated from protobuf rpc: GetQueryStatus(query_engine.QueryStatusRequest) returns (query_engine.QueryStatusResponse);
   */
  getQueryStatus(
    input: QueryStatusRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryStatusRequest, QueryStatusResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<QueryStatusRequest, QueryStatusResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}
