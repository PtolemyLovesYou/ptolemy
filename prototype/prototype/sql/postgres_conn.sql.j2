INSTALL postgres;
LOAD postgres;

CREATE SECRET (
    TYPE POSTGRES,
    HOST '{{ postgres_host }}',
    PORT {{ postgres_port }},
    DATABASE {{ postgres_db }},
    USER '{{ postgres_user }}',
    PASSWORD '{{ postgres_password }}'
);

ATTACH '' AS ptolemy (TYPE POSTGRES, READ_ONLY);

create type variant as union(str_val varchar, int_val integer, float_val decimal, bool_val boolean, json_val json);

create or replace view workspace as
    select
        *
    from ptolemy.workspace;

{% for tier in ["system", "subsystem", "component", "subcomponent"] %}
create or replace view {{ tier }}_event as
    select
        *
    from ptolemy.{{ tier }}_event;

create or replace view {{ tier }}_runtime as
    select
        id,
        {{ tier }}_event_id,
        start_time,
        end_time,
        error_type,
        error_content
    from ptolemy.runtime
    where tier = '{{ tier }}';

create or replace view {{ tier }}_input as
    select
        id,
        {{ tier }}_event_id,
        field_name,
        case
            when field_value_type = 'str' then union_value(str_val := field_value_str)::variant
            when field_value_type = 'int' then union_value(int_val := field_value_int)::variant
            when field_value_type = 'float' then union_value(float_val := field_value_float::decimal)::variant
            when field_value_type = 'bool' then union_value(bool_val := field_value_bool)::variant
            when field_value_type = 'json' then union_value(json_val := field_value_json)::variant
        end as field_value,
        field_value_type
    from ptolemy.io
    where
        io_type = 'input'
        and tier = '{{ tier }}';

create or replace view {{ tier }}_output as
    select
        id,
        {{ tier }}_event_id,
        field_name,
        case
            when field_value_type = 'str' then union_value(str_val := field_value_str)::variant
            when field_value_type = 'int' then union_value(int_val := field_value_int)::variant
            when field_value_type = 'float' then union_value(float_val := field_value_float::decimal)::variant
            when field_value_type = 'bool' then union_value(bool_val := field_value_bool)::variant
            when field_value_type = 'json' then union_value(json_val := field_value_json)::variant
        end as field_value,
        field_value_type
    from ptolemy.io
    where
        io_type = 'output'
        and tier = '{{ tier }}';

create or replace view {{ tier }}_feedback as
    select
        id,
        {{ tier }}_event_id,
        field_name,
        case
            when field_value_type = 'str' then union_value(str_val := field_value_str)::variant
            when field_value_type = 'int' then union_value(int_val := field_value_int)::variant
            when field_value_type = 'float' then union_value(float_val := field_value_float::decimal)::variant
            when field_value_type = 'bool' then union_value(bool_val := field_value_bool)::variant
            when field_value_type = 'json' then union_value(json_val := field_value_json)::variant
        end as field_value,
        field_value_type
    from ptolemy.io
    where
        io_type = 'feedback'
        and tier = '{{ tier }}';

create or replace view {{ tier }}_metadata as
    select
        id,
        {{ tier }}_event_id,
        field_name,
        field_value,
    from ptolemy.metadata
    where tier = '{{ tier }}';
{% endfor %}
