// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "query_engine.proto" (package "query_engine", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message query_engine.QueryRequest
 */
export interface QueryRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: optional uint32 batch_size = 2;
     */
    batchSize?: number; // Rows per batch, server will use default if not specified
    /**
     * @generated from protobuf field: optional uint32 timeout_seconds = 3;
     */
    timeoutSeconds?: number; // Query timeout
}
/**
 * @generated from protobuf message query_engine.QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf field: string query_id = 1;
     */
    queryId: string;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
    /**
     * @generated from protobuf field: optional string error = 3;
     */
    error?: string;
}
/**
 * @generated from protobuf message query_engine.QueryMetadata
 */
export interface QueryMetadata {
    /**
     * @generated from protobuf field: uint32 total_rows = 1;
     */
    totalRows: number;
    /**
     * @generated from protobuf field: uint32 total_batches = 2;
     */
    totalBatches: number;
    /**
     * @generated from protobuf field: repeated string column_names = 3;
     */
    columnNames: string[];
    /**
     * @generated from protobuf field: repeated string column_types = 4;
     */
    columnTypes: string[];
    /**
     * @generated from protobuf field: uint32 estimated_size_bytes = 5;
     */
    estimatedSizeBytes: number;
}
/**
 * @generated from protobuf message query_engine.QueryStatusRequest
 */
export interface QueryStatusRequest {
    /**
     * @generated from protobuf field: string query_id = 1;
     */
    queryId: string;
}
/**
 * @generated from protobuf message query_engine.QueryStatusResponse
 */
export interface QueryStatusResponse {
    /**
     * @generated from protobuf field: string query_id = 1;
     */
    queryId: string;
    /**
     * @generated from protobuf field: query_engine.QueryStatus status = 2;
     */
    status: QueryStatus;
    /**
     * @generated from protobuf field: optional string error = 3;
     */
    error?: string;
    /**
     * @generated from protobuf field: optional query_engine.QueryMetadata metadata = 4;
     */
    metadata?: QueryMetadata;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_updated = 5;
     */
    lastUpdated?: Timestamp;
}
/**
 * @generated from protobuf message query_engine.CancelQueryRequest
 */
export interface CancelQueryRequest {
    /**
     * @generated from protobuf field: string query_id = 1;
     */
    queryId: string;
}
/**
 * @generated from protobuf message query_engine.CancelQueryResponse
 */
export interface CancelQueryResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: optional string error = 2;
     */
    error?: string;
}
/**
 * @generated from protobuf message query_engine.FetchBatchRequest
 */
export interface FetchBatchRequest {
    /**
     * @generated from protobuf field: string query_id = 1;
     */
    queryId: string;
    /**
     * @generated from protobuf field: optional uint32 batch_id = 2;
     */
    batchId?: number; // If not specified, server will send next batch
}
/**
 * @generated from protobuf message query_engine.FetchBatchResponse
 */
export interface FetchBatchResponse {
    /**
     * @generated from protobuf field: string query_id = 1;
     */
    queryId: string;
    /**
     * @generated from protobuf field: uint32 batch_id = 2;
     */
    batchId: number;
    /**
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array; // Feather format
    /**
     * @generated from protobuf field: optional string error = 4;
     */
    error?: string;
    /**
     * @generated from protobuf field: bool is_last_batch = 5;
     */
    isLastBatch: boolean;
    /**
     * @generated from protobuf field: query_engine.QueryStatus status = 6;
     */
    status: QueryStatus;
}
/**
 * @generated from protobuf enum query_engine.QueryStatus
 */
export enum QueryStatus {
    /**
     * @generated from protobuf enum value: PENDING = 0;
     */
    PENDING = 0,
    /**
     * @generated from protobuf enum value: RUNNING = 1;
     */
    RUNNING = 1,
    /**
     * @generated from protobuf enum value: COMPLETED = 2;
     */
    COMPLETED = 2,
    /**
     * @generated from protobuf enum value: FAILED = 3;
     */
    FAILED = 3,
    /**
     * @generated from protobuf enum value: CANCELLED = 4;
     */
    CANCELLED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
    constructor() {
        super("query_engine.QueryRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "batch_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "timeout_seconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QueryRequest>): QueryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        if (value !== undefined)
            reflectionMergePartial<QueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRequest): QueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* optional uint32 batch_size */ 2:
                    message.batchSize = reader.uint32();
                    break;
                case /* optional uint32 timeout_seconds */ 3:
                    message.timeoutSeconds = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* optional uint32 batch_size = 2; */
        if (message.batchSize !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.batchSize);
        /* optional uint32 timeout_seconds = 3; */
        if (message.timeoutSeconds !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.timeoutSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("query_engine.QueryResponse", [
            { no: 1, name: "query_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queryId = "";
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_id */ 1:
                    message.queryId = reader.string();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                case /* optional string error */ 3:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_id = 1; */
        if (message.queryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryId);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        /* optional string error = 3; */
        if (message.error !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadata$Type extends MessageType<QueryMetadata> {
    constructor() {
        super("query_engine.QueryMetadata", [
            { no: 1, name: "total_rows", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "total_batches", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "column_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "column_types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "estimated_size_bytes", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QueryMetadata>): QueryMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalRows = 0;
        message.totalBatches = 0;
        message.columnNames = [];
        message.columnTypes = [];
        message.estimatedSizeBytes = 0;
        if (value !== undefined)
            reflectionMergePartial<QueryMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryMetadata): QueryMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 total_rows */ 1:
                    message.totalRows = reader.uint32();
                    break;
                case /* uint32 total_batches */ 2:
                    message.totalBatches = reader.uint32();
                    break;
                case /* repeated string column_names */ 3:
                    message.columnNames.push(reader.string());
                    break;
                case /* repeated string column_types */ 4:
                    message.columnTypes.push(reader.string());
                    break;
                case /* uint32 estimated_size_bytes */ 5:
                    message.estimatedSizeBytes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 total_rows = 1; */
        if (message.totalRows !== 0)
            writer.tag(1, WireType.Varint).uint32(message.totalRows);
        /* uint32 total_batches = 2; */
        if (message.totalBatches !== 0)
            writer.tag(2, WireType.Varint).uint32(message.totalBatches);
        /* repeated string column_names = 3; */
        for (let i = 0; i < message.columnNames.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.columnNames[i]);
        /* repeated string column_types = 4; */
        for (let i = 0; i < message.columnTypes.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.columnTypes[i]);
        /* uint32 estimated_size_bytes = 5; */
        if (message.estimatedSizeBytes !== 0)
            writer.tag(5, WireType.Varint).uint32(message.estimatedSizeBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.QueryMetadata
 */
export const QueryMetadata = new QueryMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryStatusRequest$Type extends MessageType<QueryStatusRequest> {
    constructor() {
        super("query_engine.QueryStatusRequest", [
            { no: 1, name: "query_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryStatusRequest>): QueryStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queryId = "";
        if (value !== undefined)
            reflectionMergePartial<QueryStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryStatusRequest): QueryStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_id */ 1:
                    message.queryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_id = 1; */
        if (message.queryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.QueryStatusRequest
 */
export const QueryStatusRequest = new QueryStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryStatusResponse$Type extends MessageType<QueryStatusResponse> {
    constructor() {
        super("query_engine.QueryStatusResponse", [
            { no: 1, name: "query_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["query_engine.QueryStatus", QueryStatus] },
            { no: 3, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "metadata", kind: "message", T: () => QueryMetadata },
            { no: 5, name: "last_updated", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<QueryStatusResponse>): QueryStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queryId = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<QueryStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryStatusResponse): QueryStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_id */ 1:
                    message.queryId = reader.string();
                    break;
                case /* query_engine.QueryStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* optional string error */ 3:
                    message.error = reader.string();
                    break;
                case /* optional query_engine.QueryMetadata metadata */ 4:
                    message.metadata = QueryMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* google.protobuf.Timestamp last_updated */ 5:
                    message.lastUpdated = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastUpdated);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_id = 1; */
        if (message.queryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryId);
        /* query_engine.QueryStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* optional string error = 3; */
        if (message.error !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.error);
        /* optional query_engine.QueryMetadata metadata = 4; */
        if (message.metadata)
            QueryMetadata.internalBinaryWrite(message.metadata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp last_updated = 5; */
        if (message.lastUpdated)
            Timestamp.internalBinaryWrite(message.lastUpdated, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.QueryStatusResponse
 */
export const QueryStatusResponse = new QueryStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelQueryRequest$Type extends MessageType<CancelQueryRequest> {
    constructor() {
        super("query_engine.CancelQueryRequest", [
            { no: 1, name: "query_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CancelQueryRequest>): CancelQueryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queryId = "";
        if (value !== undefined)
            reflectionMergePartial<CancelQueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelQueryRequest): CancelQueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_id */ 1:
                    message.queryId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelQueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_id = 1; */
        if (message.queryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.CancelQueryRequest
 */
export const CancelQueryRequest = new CancelQueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelQueryResponse$Type extends MessageType<CancelQueryResponse> {
    constructor() {
        super("query_engine.CancelQueryResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CancelQueryResponse>): CancelQueryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<CancelQueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelQueryResponse): CancelQueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* optional string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelQueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* optional string error = 2; */
        if (message.error !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.CancelQueryResponse
 */
export const CancelQueryResponse = new CancelQueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchBatchRequest$Type extends MessageType<FetchBatchRequest> {
    constructor() {
        super("query_engine.FetchBatchRequest", [
            { no: 1, name: "query_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "batch_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FetchBatchRequest>): FetchBatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queryId = "";
        if (value !== undefined)
            reflectionMergePartial<FetchBatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchBatchRequest): FetchBatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_id */ 1:
                    message.queryId = reader.string();
                    break;
                case /* optional uint32 batch_id */ 2:
                    message.batchId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchBatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_id = 1; */
        if (message.queryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryId);
        /* optional uint32 batch_id = 2; */
        if (message.batchId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.batchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.FetchBatchRequest
 */
export const FetchBatchRequest = new FetchBatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchBatchResponse$Type extends MessageType<FetchBatchResponse> {
    constructor() {
        super("query_engine.FetchBatchResponse", [
            { no: 1, name: "query_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "batch_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_last_batch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "status", kind: "enum", T: () => ["query_engine.QueryStatus", QueryStatus] }
        ]);
    }
    create(value?: PartialMessage<FetchBatchResponse>): FetchBatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queryId = "";
        message.batchId = 0;
        message.data = new Uint8Array(0);
        message.isLastBatch = false;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<FetchBatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchBatchResponse): FetchBatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query_id */ 1:
                    message.queryId = reader.string();
                    break;
                case /* uint32 batch_id */ 2:
                    message.batchId = reader.uint32();
                    break;
                case /* bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                case /* optional string error */ 4:
                    message.error = reader.string();
                    break;
                case /* bool is_last_batch */ 5:
                    message.isLastBatch = reader.bool();
                    break;
                case /* query_engine.QueryStatus status */ 6:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchBatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query_id = 1; */
        if (message.queryId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queryId);
        /* uint32 batch_id = 2; */
        if (message.batchId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.batchId);
        /* bytes data = 3; */
        if (message.data.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        /* optional string error = 4; */
        if (message.error !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.error);
        /* bool is_last_batch = 5; */
        if (message.isLastBatch !== false)
            writer.tag(5, WireType.Varint).bool(message.isLastBatch);
        /* query_engine.QueryStatus status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message query_engine.FetchBatchResponse
 */
export const FetchBatchResponse = new FetchBatchResponse$Type();
/**
 * @generated ServiceType for protobuf service query_engine.QueryEngine
 */
export const QueryEngine = new ServiceType("query_engine.QueryEngine", [
    { name: "Query", options: {}, I: QueryRequest, O: QueryResponse },
    { name: "FetchBatch", serverStreaming: true, options: {}, I: FetchBatchRequest, O: FetchBatchResponse },
    { name: "CancelQuery", options: {}, I: CancelQueryRequest, O: CancelQueryResponse },
    { name: "GetQueryStatus", options: {}, I: QueryStatusRequest, O: QueryStatusResponse }
]);
