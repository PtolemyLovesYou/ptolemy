[project]
name = "ptolemy-workspace"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.10.4",
]

[tool.uv.workspace]
members = ["ptolemy", "prototype", "docs", "query-engine", "integration-tests"]

[tool.uv.sources]
prototype = { workspace = true }
ptolemy = { workspace = true }
docs = { workspace = true }

[dependency-groups]
dev = [
    "black>=24.10.0",
    "duckdb>=1.1.3",
    "jupyter>=1.1.1",
    "maturin>=1.8.2",
    "pylint>=3.3.3",
    "pylint-pydantic>=0.3.4",
    "pytest>=8.3.4",
    "python-semantic-release>=9.20.0",
    "tqdm>=4.67.1",
]

[tool.black]
include = '\.pyi?$'

[tool.semantic_release]
assets = []
version_variables = [
    "ptolemy/python/ptolemy/__init__.py:__version__"
]
build_command = """
maturin build -m ptolemy/Cargo.toml --release
"""
build_command_env = ["PTOLEMY_ENV"]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "/Users/besaleli/ptolemy"
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.dev]
match = "^dev$"
prerelease_token = "dev"
prerelease = true
prerelease_offset = "patch"

[tool.semantic_release.branches.beta]
match = "^beta$"
prerelease_token = "beta"
prerelease = true
prerelease_offset = "patch"

[tool.semantic_release.branches.rc]
match = "^rc$"
prerelease_token = "rc"
prerelease = true
prerelease_offset = "patch"

[tool.semantic_release.branches.test]
match = "^113-python-semantic-versioning$"
prerelease_token = "test"
prerelease = true
prerelease_offset = "patch"

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = false
ignore_merge_commits = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
