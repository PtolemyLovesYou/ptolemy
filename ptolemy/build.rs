use std::fs;
use std::path::{Path, PathBuf};

fn visit_dir(dir: &Path, queries: &mut String, base_path: &Path) {
    for entry in fs::read_dir(dir).unwrap() {
        let entry = entry.unwrap();
        let path = entry.path();

        if path.is_dir() {
            visit_dir(&path, queries, base_path);
        } else if path.extension().unwrap_or_default() == "gql" {
            // Get relative path from base_path
            let rel_path = path.strip_prefix(base_path).unwrap();
            // Convert path segments to const name
            let const_name = rel_path
                .to_str()
                .unwrap()
                .replace('/', "_")
                .replace(".gql", "")
                .to_uppercase();

            let content = fs::read_to_string(&path).unwrap();
            queries.push_str(&format!(
                "/// {}\npub const {}: &'static str = r###\"\n{}\n\"###;\n\n",
                format!("Pulled from {}", path.display()),
                const_name,
                content.trim()
            ));
        }
    }
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // gql queries
    let out_dir = PathBuf::from("src/generated/gql.rs");
    let queries_dir = PathBuf::from("graphql/queries");

    let mut queries = "// This file is @generated by ptolemy <3.\n\n".to_string();

    visit_dir(&queries_dir, &mut queries, &queries_dir);

    fs::write(out_dir, queries).unwrap();

    println!("cargo:rerun-if-changed=graphql/queries/");

    // protobuf
    let build_protobufs = std::env::var("BUILD_PROTOBUFS")
        .map(|s| s == "1")
        .unwrap_or(true);

    if build_protobufs {
        tonic_build::configure()
            .build_server(true)
            .out_dir("src/generated")
            .compile_protos(&["proto/observer.proto"], &["proto/observer"])?;
    }

    Ok(())
}
