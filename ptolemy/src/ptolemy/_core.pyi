"""Header file for ptolemy core."""
from __future__ import annotations
from typing import List, Optional, Any, Dict

class PtolemyClient:
    """Ptolemy Client."""
    def __init__(self, workspace_id: str, autoflush: bool, batch_size: int) -> 'PtolemyClient': ...
    def trace(self, name: str, parameters: Optional[Dict[str, Any]] = None, version: Optional[str] = None, environment: Optional[str] = None) -> 'PtolemyClient': ...
    def child(self, name: str, parameters: Optional[Dict[str, Any]] = None, version: Optional[str] = None, environment: Optional[str] = None) -> 'PtolemyClient': ...
    def event(self, name: str, parameters: Optional[Dict[str, Any]] = None, version: Optional[str] = None, environment: Optional[str] = None) -> None: ...
    def runtime(self, start_time: float, end_time: float, error_type: Optional[str] = None, error_content: Optional[str] = None) -> None: ...
    def inputs(self, **kwds: Any) -> None: ...
    def outputs(self, **kwds: Any) -> None: ...
    def feedback(self, **kwds: Any) -> None: ...
    def metadata(self, **kwds: Any) -> None: ...
    def push_event(self) -> bool: ...
    def push_io(self) -> bool: ...
    def flush(self) -> bool: ...

class BlockingObserverClient:
    """Blocking Observer Client."""
    def __init__(self, batch_size: int) -> None: ...
    def queue(self, records: List[ProtoRecord]) -> bool: ...
    def queue_event(self, record: ProtoRecord) -> bool: ...
    def queue_size(self) -> int: ...
    def flush(self) -> bool: ...

class ProtoRecord:
    """Handler for ProtoRecord."""
    @staticmethod
    def event(
        tier: str,
        parent_id: str,
        name: str,
        id: Optional[str] = None,
        parameters: Optional[dict] = None,
        version: Optional[str] = None,
        environment: Optional[str] = None,
    ) -> 'ProtoRecord': ...
    @staticmethod
    def runtime(
        tier: str,
        parent_id: str,
        start_time: float,
        end_time: float,
        id: Optional[str] = None,
        error_type: Optional[str] = None,
        error_content: Optional[str] = None,
    ) -> 'ProtoRecord': ...
    @staticmethod
    def io(
        tier: str,
        log_type: str,
        parent_id: str,
        field_name: str,
        field_value: Any,
        id: Optional[str] = None,
    ) -> 'ProtoRecord': ...
    @staticmethod
    def metadata(
        tier: str,
        parent_id: str,
        field_name: str,
        field_value: str,
        id: Optional[str] = None,
    ) -> 'ProtoRecord': ...
