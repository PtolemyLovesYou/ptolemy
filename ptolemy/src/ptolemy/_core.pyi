from __future__ import annotations
from typing import List, Optional, Any
from .utils.record import Record

class BlockingObserverClient:
    def __init__(self, batch_size: int) -> None: ...
    def queue(self, records: List[Record]) -> bool: ...
    def queue_size(self) -> int: ...
    def flush(self) -> bool: ...

class Event:
    def __init__(self, tier: str, parent_id: str, name: str, id: Optional[str] = None, parameters: Optional[dict] = None, version: Optional[str] = None, environment: Optional[str] = None) -> None: ...

class Runtime:
    def __init__(self, tier: str, parent_id: str, start_time: float, end_time: float, id: Optional[str] = None, error_type: Optional[str] = None, error_content: Optional[str] = None) -> None: ...

class IO:
    def __init__(self, tier: str, log_type: str, parent_id: str, field_name: str, field_value: Any, id: Optional[str] = None) -> None: ...

class Metadata:
    def __init__(self, tier: str, parent_id: str, field_name: str, field_value: str, id: Optional[str] = None) -> None: ...
