// This file is @generated by ptolemy <3.

pub const USER_API_KEYS_QUERY: &'static str = r###"UserApiKeys"###;

pub const USER_WORKSPACES_QUERY: &'static str = r###"UserWorkspaces"###;

pub const SEARCH_USERS_QUERY: &'static str = r###"SearchUsers"###;

pub const WORKSPACE_USERS_QUERY: &'static str = r###"WorkspaceUsers"###;

pub const WORKSPACE_SERVICE_API_KEYS_QUERY: &'static str = r###"WorkspaceServiceApiKeys"###;

pub const CREATE_USER_API_KEY_MUTATION: &'static str = r###"CreateUserApiKey"###;

pub const CREATE_USER_MUTATION: &'static str = r###"CreateUser"###;

pub const DELETE_USER_API_KEY_MUTATION: &'static str = r###"DeleteUserApiKey"###;

pub const DELETE_USER_MUTATION: &'static str = r###"DeleteUser"###;

pub const ADD_USER_TO_WORKSPACE_MUTATION: &'static str = r###"AddUserToWorkspace"###;

pub const CHANGE_WORKSPACE_USER_ROLE_MUTATION: &'static str = r###"ChangeWorkspaceUserRole"###;

pub const CREATE_SERVICE_API_KEY_MUTATION: &'static str = r###"CreateServiceApiKey"###;

pub const DELETE_SERVICE_API_KEY_MUTATION: &'static str = r###"DeleteServiceApiKey"###;

pub const CREATE_WORKSPACE_MUTATION: &'static str = r###"CreateWorkspace"###;

pub const REMOVE_USER_FROM_WORKSPACE_MUTATION: &'static str = r###"RemoveUserFromWorkspace"###;

pub const DELETE_WORKSPACE_MUTATION: &'static str = r###"DeleteWorkspace"###;

pub const LOGIN_MUTATION: &'static str = r###"Login"###;

pub const QUERY: &'static str = r###"query UserApiKeys($userId: Uuid) {
  user(id: $userId) {
    userApiKeys {
      expiresAt
      id
      keyPreview
      name
      userId
    }
  }
}

query UserWorkspaces($Id: Uuid, $username: String) {
  user(id: $Id, username: $username) {
    workspaces {
      archived
      description
      id
      name
      createdAt
      updatedAt
      users(username: $username) {
        role
      }
    }
  }
}

query SearchUsers($username: String, $userId: Uuid) {
  user(username: $username, id: $userId) {
    ...ReturnsUserModel
  }
}

query WorkspaceUsers($workspaceId: Uuid, $workspaceName: String, $userId: Uuid, $username: String) {
  workspace(id: $workspaceId, name: $workspaceName) {
    users {
      role
      user(id: $userId, username: $username) {
        ...ReturnsUserModel
      }
    }
  }
}

query WorkspaceServiceApiKeys($workspaceId: Uuid) {
  workspace(id: $workspaceId) {
    serviceApiKeys {
      id
      expiresAt
      keyPreview
      name
      permissions
      workspaceId
    }
  }
}

fragment ReturnsUserModel {
  id
  username
  displayName
  status
  isAdmin
  isSysadmin
}
"###;

pub const MUTATION: &'static str = r###"mutation CreateUserApiKey($name: String!, $userId: Uuid!, $durationDays: Int) {
  user(userId: $userId) {
    createUserApiKey(name: $name, durationDays: $durationDays) {
      ...CreateApiKey
      ...StatusFields
    }
  }
}

mutation CreateUser($userId: Uuid!, $username: String!, $password: String!, $isAdmin: Boolean!, $displayName: String) {
  user(userId: $userId) {
    create(
      userData: {username: $username, password: $password, isSysadmin: false, isAdmin: $isAdmin, displayName: $displayName}
    ) {
      ...StatusFields
      ...ReturnsUserModel
    }
  }
}

mutation DeleteUserApiKey($apiKeyId: Uuid!, $userId: Uuid!) {
  user(userId: $userId) {
    deleteUserApiKey(apiKeyId: $apiKeyId) {
      ...StatusFields
    }
  }
}

mutation DeleteUser($Id: Uuid!, $userId: Uuid!) {
  user(userId: $userId) {
    delete(id: $Id) {
      ...StatusFields
    }
  }
}

mutation AddUserToWorkspace($userId: Uuid!, $targetUserId: Uuid!, $workspaceId: Uuid!, $role: WorkspaceRoleEnum!) {
  workspace(userId: $userId) {
    addUser(
      workspaceUser: {userId: $targetUserId, workspaceId: $workspaceId, role: $role}
    ) {
      ...StatusFields
    }
  }
}

mutation ChangeWorkspaceUserRole($role: WorkspaceRoleEnum!, $targetUserId: Uuid!, $userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    changeWorkspaceUserRole(
      newRole: $role
      userId: $targetUserId
      workspaceId: $workspaceId
    ) {
      ...StatusFields
    }
  }
}

mutation CreateServiceApiKey($name: String!, $permission: ApiKeyPermissionEnum!, $userId: Uuid!, $workspaceId: Uuid!, $durationDays: Int) {
  workspace(userId: $userId) {
    createServiceApiKey(
      name: $name
      permission: $permission
      workspaceId: $workspaceId
      durationDays: $durationDays
    ) {
      ...StatusFields
      ...CreateApiKey
    }
  }
}

mutation DeleteServiceApiKey($apiKeyId: Uuid!, $userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    deleteServiceApiKey(apiKeyId: $apiKeyId, workspaceId: $workspaceId) {
      ...StatusFields
    }
  }
}

mutation CreateWorkspace($userId: Uuid!, $name: String!, $description: String, $adminUserId: Uuid!) {
  workspace(userId: $userId) {
    create(
      workspaceData: {name: $name, description: $description}
      adminUserId: $adminUserId
    ) {
      ...StatusFields
      workspace {
        id
        name
        description
        archived
        createdAt
        updatedAt
      }
    }
  }
}

mutation RemoveUserFromWorkspace($targetUserId: Uuid!, $userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    removeUser(userId: $targetUserId, workspaceId: $workspaceId) {
      ...StatusFields
    }
  }
}

mutation DeleteWorkspace($userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    delete(workspaceId: $workspaceId) {
      ...StatusFields
    }
  }
}

mutation Login($username: String!, $password: String!) {
  auth(userData: {username: $username, password: $password}) {
    ...StatusFields
    ...ReturnsUserModel
    token
  }
}

fragment StatusFields {
  success
  error {
    field
    message
  }
}

fragment ReturnsUserModel {
  user {
      displayName
      id
      isAdmin
      isSysadmin
      status
      username
    }
}

fragment CreateApiKey {
  apiKey {
    apiKey
  }
}
"###;

