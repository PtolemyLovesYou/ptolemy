// This file is @generated by ptolemy <3.

/// Pulled from graphql/queries/auth/mutations/login.gql
pub const AUTH_MUTATIONS_LOGIN: &'static str = r###"
mutation Login($username: String!, $password: String!) {
  auth(userData: {username: $username, password: $password}) {
    error {
      field
      message
    }
    success
    token
    user {
      displayName
      id
      isAdmin
      isSysadmin
      status
      username
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/add_user.gql
pub const WORKSPACE_MUTATIONS_ADD_USER: &'static str = r###"
mutation AddUserToWorkspace($userId: Uuid!, $targetUserId: Uuid!, $workspaceId: Uuid!, $role: WorkspaceRoleEnum!) {
  workspace(userId: $userId) {
    addUser(
      workspaceUser: {userId: $targetUserId, workspaceId: $workspaceId, role: $role}
    ) {
      success
      error {
        field
        message
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/create.gql
pub const WORKSPACE_MUTATIONS_CREATE: &'static str = r###"
mutation CreateWorkspace($userId: Uuid!, $name: String!, $description: String, $adminUserId: Uuid!) {
  workspace(userId: $userId) {
    create(
      workspaceData: {name: $name, description: $description}
      adminUserId: $adminUserId
    ) {
      error {
        field
        message
      }
      workspace {
        id
        name
        description
        archived
        createdAt
        updatedAt
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/remove_user.gql
pub const WORKSPACE_MUTATIONS_REMOVE_USER: &'static str = r###"
mutation RemoveUserFromWorkspace($targetUserId: Uuid!, $userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    removeUser(userId: $targetUserId, workspaceId: $workspaceId) {
      error {
        field
        message
      }
      success
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/delete.gql
pub const WORKSPACE_MUTATIONS_DELETE: &'static str = r###"
mutation DeleteWorkspace($userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    delete(workspaceId: $workspaceId) {
      success
      error {
        field
        message
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/delete_service_api_key.gql
pub const WORKSPACE_MUTATIONS_DELETE_SERVICE_API_KEY: &'static str = r###"
mutation DeleteServiceApiKey($apiKeyId: Uuid!, $userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    deleteServiceApiKey(apiKeyId: $apiKeyId, workspaceId: $workspaceId) {
      success
      error {
        field
        message
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/create_service_api_key.gql
pub const WORKSPACE_MUTATIONS_CREATE_SERVICE_API_KEY: &'static str = r###"
mutation CreateServiceApiKey($name: String!, $permission: ApiKeyPermissionEnum!, $userId: Uuid!, $workspaceId: Uuid!, $durationDays: Int) {
  workspace(userId: $userId) {
    createServiceApiKey(
      name: $name
      permission: $permission
      workspaceId: $workspaceId
      durationDays: $durationDays
    ) {
      error {
        field
        message
      }
      success
      apiKey {
        apiKey
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/mutations/change_user_role.gql
pub const WORKSPACE_MUTATIONS_CHANGE_USER_ROLE: &'static str = r###"
mutation ChangeWorkspaceUserRole($role: WorkspaceRoleEnum!, $targetUserId: Uuid!, $userId: Uuid!, $workspaceId: Uuid!) {
  workspace(userId: $userId) {
    changeWorkspaceUserRole(
      newRole: $role
      userId: $targetUserId
      workspaceId: $workspaceId
    ) {
      error {
        field
        message
      }
      success
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/queries/users_by_name.gql
pub const WORKSPACE_QUERIES_USERS_BY_NAME: &'static str = r###"
query UserWorkspacesByName($name: String) {
  workspace(name: $name) {
    name
    users {
      role
      user {
        id
        username
        displayName
        status
        isAdmin
        isSysadmin
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/queries/service_api_keys.gql
pub const WORKSPACE_QUERIES_SERVICE_API_KEYS: &'static str = r###"
query WorkspaceServiceApiKeys($workspaceId: Uuid) {
  workspace(id: $workspaceId) {
    serviceApiKeys {
      id
      expiresAt
      keyPreview
      name
      permissions
      workspaceId
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/queries/users.gql
pub const WORKSPACE_QUERIES_USERS: &'static str = r###"
query UserWorkspaces($Id: Uuid) {
  workspace(id: $Id) {
    users {
      role
      user {
        id
        username
        displayName
        status
        isAdmin
        isSysadmin
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/workspace/queries/user_role.gql
pub const WORKSPACE_QUERIES_USER_ROLE: &'static str = r###"
query GetUserWorkspaceRole($workspaceId: Uuid, $userId: Uuid) {
  workspace(id: $workspaceId) {
    users(userId: $userId) {
      role
    }
  }
}
"###;

/// Pulled from graphql/queries/user/mutations/delete_user_api_key.gql
pub const USER_MUTATIONS_DELETE_USER_API_KEY: &'static str = r###"
mutation DeleteUserApiKey($apiKeyId: Uuid!, $userId: Uuid!) {
  user(userId: $userId) {
    deleteUserApiKey(apiKeyId: $apiKeyId) {
      error {
        field
        message
      }
      success
    }
  }
}
"###;

/// Pulled from graphql/queries/user/mutations/create.gql
pub const USER_MUTATIONS_CREATE: &'static str = r###"
mutation CreateUser($userId: Uuid!, $username: String!, $password: String!, $isAdmin: Boolean!, $displayName: String) {
  user(userId: $userId) {
    create(
      userData: {username: $username, password: $password, isSysadmin: false, isAdmin: $isAdmin, displayName: $displayName}
    ) {
      error {
        field
        message
      }
      success
      user {
        displayName
        id
        isAdmin
        isSysadmin
        status
        username
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/user/mutations/delete.gql
pub const USER_MUTATIONS_DELETE: &'static str = r###"
mutation DeleteUser($Id: Uuid!, $userId: Uuid!) {
  user(userId: $userId) {
    delete(id: $Id) {
      error {
        field
        message
      }
      success
    }
  }
}
"###;

/// Pulled from graphql/queries/user/mutations/create_user_api_key.gql
pub const USER_MUTATIONS_CREATE_USER_API_KEY: &'static str = r###"
mutation CreateUserApiKey($name: String!, $userId: Uuid!, $durationDays: Int) {
  user(userId: $userId) {
    createUserApiKey(name: $name, durationDays: $durationDays) {
      apiKey {
        apiKey
      }
      error {
        field
        message
      }
      success
    }
  }
}
"###;

/// Pulled from graphql/queries/user/queries/workspaces.gql
pub const USER_QUERIES_WORKSPACES: &'static str = r###"
query UserWorkspaces($Id: Uuid, $username: String) {
  user(id: $Id, username: $username) {
    workspaces {
      archived
      description
      id
      name
      createdAt
      updatedAt
      users(username: $username) {
        role
      }
    }
  }
}
"###;

/// Pulled from graphql/queries/user/queries/user_api_keys.gql
pub const USER_QUERIES_USER_API_KEYS: &'static str = r###"
query UserApiKeys($userId: Uuid) {
  user(id: $userId) {
    userApiKeys {
      expiresAt
      id
      keyPreview
      name
      userId
    }
  }
}
"###;

/// Pulled from graphql/queries/user/queries/users.gql
pub const USER_QUERIES_USERS: &'static str = r###"
query UserByName($username: String, $userId: Uuid) {
  user(username: $username, id: $userId) {
    id
    username
    displayName
    isAdmin
    isSysadmin
    status
  }
}
"###;

