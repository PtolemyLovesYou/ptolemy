# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github -m ptolemy-py/Cargo.toml -o test.yml
#
name: Python Release

on:
  # push:
  #   branches:
  #     - main
  #     - master
  #   tags:
  #     - '*'
  # pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          # - runner: ubuntu-22.04
          #   target: armv7
          # - runner: ubuntu-22.04
          #   target: s390x
          # - runner: ubuntu-22.04
          #   target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            # For CentOS/RHEL based systems (manylinux)
            if command -v yum &> /dev/null; then
              # Enable EPEL repository which often has newer packages
              yum install -y epel-release
              # Enable PowerTools/CodeReady repository for CentOS 8/RHEL 8
              if [ -f /etc/centos-release ] || [ -f /etc/redhat-release ]; then
                if grep -q "release 8" /etc/centos-release 2>/dev/null || grep -q "release 8" /etc/redhat-release 2>/dev/null; then
                  yum install -y dnf-plugins-core
                  yum config-manager --set-enabled powertools || yum config-manager --set-enabled PowerTools || yum config-manager --set-enabled crb
                fi
              fi
              # Update and install newer protobuf
              yum update -y
              yum install -y protobuf3-devel protobuf3-compiler || yum install -y protobuf-devel protobuf-compiler
              # Install other dependencies
              yum install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v dnf &> /dev/null; then
              # For newer Fedora/RHEL systems
              dnf install -y epel-release
              dnf update -y
              dnf install -y protobuf-devel protobuf-compiler
              dnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v microdnf &> /dev/null; then
              microdnf install -y protobuf-devel protobuf-compiler
              microdnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            fi
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            # For CentOS/RHEL based systems (manylinux)
            if command -v yum &> /dev/null; then
              # Enable EPEL repository which often has newer packages
              yum install -y epel-release
              # Enable PowerTools/CodeReady repository for CentOS 8/RHEL 8
              if [ -f /etc/centos-release ] || [ -f /etc/redhat-release ]; then
                if grep -q "release 8" /etc/centos-release 2>/dev/null || grep -q "release 8" /etc/redhat-release 2>/dev/null; then
                  yum install -y dnf-plugins-core
                  yum config-manager --set-enabled powertools || yum config-manager --set-enabled PowerTools || yum config-manager --set-enabled crb
                fi
              fi
              # Update and install newer protobuf
              yum update -y
              yum install -y protobuf3-devel protobuf3-compiler || yum install -y protobuf-devel protobuf-compiler
              # Install other dependencies
              yum install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v dnf &> /dev/null; then
              # For newer Fedora/RHEL systems
              dnf install -y epel-release
              dnf update -y
              dnf install -y protobuf-devel protobuf-compiler
              dnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v microdnf &> /dev/null; then
              microdnf install -y protobuf-devel protobuf-compiler
              microdnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          # - runner: ubuntu-22.04
          #   target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          before-script-linux: |
            # For CentOS/RHEL based systems (manylinux)
            if command -v yum &> /dev/null; then
              # Enable EPEL repository which often has newer packages
              yum install -y epel-release
              # Enable PowerTools/CodeReady repository for CentOS 8/RHEL 8
              if [ -f /etc/centos-release ] || [ -f /etc/redhat-release ]; then
                if grep -q "release 8" /etc/centos-release 2>/dev/null || grep -q "release 8" /etc/redhat-release 2>/dev/null; then
                  yum install -y dnf-plugins-core
                  yum config-manager --set-enabled powertools || yum config-manager --set-enabled PowerTools || yum config-manager --set-enabled crb
                fi
              fi
              # Update and install newer protobuf
              yum update -y
              yum install -y protobuf3-devel protobuf3-compiler || yum install -y protobuf-devel protobuf-compiler
              # Install other dependencies
              yum install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v dnf &> /dev/null; then
              # For newer Fedora/RHEL systems
              dnf install -y epel-release
              dnf update -y
              dnf install -y protobuf-devel protobuf-compiler
              dnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v microdnf &> /dev/null; then
              microdnf install -y protobuf-devel protobuf-compiler
              microdnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            fi
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          before-script-linux: |
            # For CentOS/RHEL based systems (manylinux)
            if command -v yum &> /dev/null; then
              # Enable EPEL repository which often has newer packages
              yum install -y epel-release
              # Enable PowerTools/CodeReady repository for CentOS 8/RHEL 8
              if [ -f /etc/centos-release ] || [ -f /etc/redhat-release ]; then
                if grep -q "release 8" /etc/centos-release 2>/dev/null || grep -q "release 8" /etc/redhat-release 2>/dev/null; then
                  yum install -y dnf-plugins-core
                  yum config-manager --set-enabled powertools || yum config-manager --set-enabled PowerTools || yum config-manager --set-enabled crb
                fi
              fi
              # Update and install newer protobuf
              yum update -y
              yum install -y protobuf3-devel protobuf3-compiler || yum install -y protobuf-devel protobuf-compiler
              # Install other dependencies
              yum install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v dnf &> /dev/null; then
              # For newer Fedora/RHEL systems
              dnf install -y epel-release
              dnf update -y
              dnf install -y protobuf-devel protobuf-compiler
              dnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            elif command -v microdnf &> /dev/null; then
              microdnf install -y protobuf-devel protobuf-compiler
              microdnf install -y openssl-devel pkgconfig patchelf gcc gcc-c++ make
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: ${{ matrix.platform.target }}
      - name: Install Windows dependencies
        run: |
          choco install openssl protoc
          echo "PKG_CONFIG_PATH=C:\Program Files\OpenSSL-Win64\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $env:GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install macOS dependencies
        run: |
          brew install openssl@3 protobuf pkg-config
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ptolemy-py/Cargo.toml -i python3.13t
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # - name: Install Linux dependencies
      #   run: |
      #       # Try to determine the right package manager and installation method
      #       if command -v yum &> /dev/null; then
      #         # CentOS/RHEL based (manylinux)
      #         yum install -y openssl-devel pkgconfig protobuf-compiler gcc gcc-c++ make
      #       elif command -v dnf &> /dev/null; then
      #         # Newer Fedora/RHEL
      #         dnf install -y openssl-devel pkgconfig protobuf-compiler gcc gcc-c++ make
      #       elif command -v microdnf &> /dev/null; then
      #         # Minimal DNF sometimes used in containers
      #         microdnf install -y openssl-devel pkgconfig protobuf-compiler gcc gcc-c++ make
      #       elif [ -f /etc/alpine-release ]; then
      #         # Alpine Linux
      #         apk add openssl-dev pkgconfig protobuf-compiler gcc g++ make
      #       else
      #         # Ubuntu/Debian
      #         apt-get update && \
      #         apt-get install -y --no-install-recommends \
      #           libssl-dev \
      #           pkg-config \
      #           protobuf-compiler \
      #           build-essential
      #       fi
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path ptolemy-py/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      
      # MANUALLY ADDED: for tag name
      - name: Get current version
        id: current_version
        run: |
          echo "version=$(cat pyproject.toml | grep '^version = ".*"' | cut -d'"' -f2)" >> $GITHUB_OUTPUT

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
