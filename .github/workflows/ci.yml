name: Version Management

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump to perform'
        required: true
        type: choice
        options:
          - beta
          - rc
          - release
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.new_version.outputs.version }}
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
      is_alpha: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip uv \
            && uv venv \
            && uv pip install toml pydantic

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest version from git tags
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Found latest version from tags: $LATEST_VERSION"

      - name: Get current version from pyproject.toml
        id: current_version
        run: |
          CURRENT_VERSION=$(cat pyproject.toml | grep '^version = ".*"' | cut -d'"' -f2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in pyproject.toml: $CURRENT_VERSION"

      # Handle automatic alpha bump on push to dev
      - name: Get git hash
        id: git_hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Create versioning branch
      - name: Create version branch
        id: create_branch
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            BRANCH_NAME="version/alpha-${{ steps.git_hash.outputs.hash }}"
          else
            BRANCH_NAME="version/${{ github.event.inputs.version_type }}-$(date +'%Y%m%d%H%M%S')"
          fi
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Bump alpha version (on push)
        if: github.event_name == 'push'
        run: uv run bump_version.py alpha --git-hash ${{ steps.git_hash.outputs.hash }} --base-version ${{ steps.get_latest_tag.outputs.latest_version }}

      # Handle workflow dispatch for beta/rc/release
      - name: Bump version (beta/rc/release)
        if: |
          github.event_name == 'workflow_dispatch' && 
          (github.event.inputs.version_type == 'beta' || 
           github.event.inputs.version_type == 'rc' || 
           github.event.inputs.version_type == 'release')
        run: uv run bump_version.py ${{ github.event.inputs.version_type }} --base-version ${{ steps.get_latest_tag.outputs.latest_version }}

      # Handle workflow dispatch for major/minor/patch
      - name: Bump version (major/minor/patch)
        if: |
          github.event_name == 'workflow_dispatch' && 
          (github.event.inputs.version_type == 'major' || 
           github.event.inputs.version_type == 'minor' || 
           github.event.inputs.version_type == 'patch')
        run: |
          if [ "${{ github.event.inputs.version_type }}" = "major" ]; then
            uv run bump_version.py mjr --base-version ${{ steps.get_latest_tag.outputs.latest_version }}
          elif [ "${{ github.event.inputs.version_type }}" = "minor" ]; then
            uv run bump_version.py mnr --base-version ${{ steps.get_latest_tag.outputs.latest_version }}
          else
            uv run bump_version.py patch --base-version ${{ steps.get_latest_tag.outputs.latest_version }}
          fi

      # Get new version after bump
      - name: Get new version
        id: new_version
        run: |
          echo "version=$(cat pyproject.toml | grep '^version = ".*"' | cut -d'"' -f2)" >> $GITHUB_OUTPUT

      # Commit and push changes to the version branch
      - name: Commit version bump
        run: |
          git add pyproject.toml
          git add **/pyproject.toml || true
          git add **/Cargo.toml || true
          git commit -m "chore: bump version ${{ steps.get_latest_tag.outputs.latest_version }} â†’ ${{ steps.new_version.outputs.version }}"
          git push --set-upstream origin ${{ steps.create_branch.outputs.branch_name }}

  create-tag-or-release:
    needs: bump-version
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.version_type == 'beta' || 
       github.event.inputs.version_type == 'rc' || 
       github.event.inputs.version_type == 'release') || 
      needs.bump-version.outputs.is_alpha == 'true'
    
    steps:
      # Only run this step for alpha versions (push to main)
      - name: Checkout code for alpha tag
        if: needs.bump-version.outputs.is_alpha == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump-version.outputs.branch_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Create a lightweight tag for alpha versions (without creating a GitHub release)
      - name: Create Alpha Tag
        if: needs.bump-version.outputs.is_alpha == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create lightweight tag (no -a flag)
          git tag v${{ needs.bump-version.outputs.new_version }}
          git push origin v${{ needs.bump-version.outputs.new_version }}
          
          # Delete the auto-created GitHub release if it exists
          # First get the release ID if it exists
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ needs.bump-version.outputs.new_version }}" | \
            grep -o '"id": [0-9]*' | head -1 | awk '{print $2}')
          
          # If a release ID was found, delete the release but keep the tag
          if [ ! -z "$RELEASE_ID" ]; then
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
            echo "Deleted auto-created release for alpha tag"
          fi
      
      # Only run this step for beta/rc/release versions
      - name: Create Release
        if: |
          github.event_name == 'workflow_dispatch' && 
          (github.event.inputs.version_type == 'beta' || 
           github.event.inputs.version_type == 'rc' || 
           github.event.inputs.version_type == 'release')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          name: ${{ needs.bump-version.outputs.new_version }}
          draft: false
          prerelease: ${{ github.event.inputs.version_type != 'release' }}
          generate_release_notes: true
          target_commitish: ${{ needs.bump-version.outputs.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
